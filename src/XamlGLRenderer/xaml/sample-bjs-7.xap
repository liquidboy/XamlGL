<Application
    xmlns="http://schemas.xamlgl.com/xamlgl"
    xmlns:x="http://schemas.xamlgl.com/xamlgl/x"
    ThemeName="Metro">
    <Grid x:Name="layoutRoot">
      <Scene x:Name="mainScene">
        <Script>
          var scene = vt.Get("mainScene");
          var camera = vt.Get("arcRotateCamera");
          var start_time = Date.now();
          var canvas = di.get("rootCanvas");
          
          scene.Ctrl.beforeRender = () => {
            var cameraDepth = ((Date.now() - start_time) * 0.03) % 8000;
            camera.Ctrl.position.z = cameraDepth;
          };
          
          let plane;
          let pickOrigin;
          let isPanning = false;
          scene.Ctrl.onPointerDown = (evt) => {
            if (evt.ctrlKey) {
              var pickResult = scene.Ctrl.pick(scene.Ctrl.pointerX, scene.Ctrl.pointerY);
              if (pickResult.pickedMesh) {
                let normal = camera.Ctrl.position.subtract(pickResult.pickedPoint).normalize();
                plane = BABYLON.Plane.FromPositionAndNormal(pickResult.pickedPoint, normal);
                pickOrigin = pickResult.pickedPoint;
                isPanning = true;
                camera.Ctrl.detachControl(canvas);
              }
            }
          };

          scene.Ctrl.onPointerUp = () => {
            isPanning = false;
            camera.Ctrl.attachControl(canvas, true, true);
          };

          const identity = BABYLON.Matrix.Identity();
          scene.Ctrl.onPointerMove = (evt) => {
            if (isPanning) {
              let ray = scene.Ctrl.createPickingRay(scene.Ctrl.pointerX, scene.Ctrl.pointerY, identity, camera.Ctrl, false);
              let distance = ray.intersectsPlane(plane);

              if (distance === null) {
                return;
              }
              let pickedPoint = ray.direction.scale(distance).add(ray.origin);
              let diff = pickedPoint.subtract(pickOrigin);
              camera.Ctrl.target.subtractInPlace(diff);
            }
          };
        </Script>
      </Scene>

      <Camera x:Name="arcRotateCamera" Type="ArcRotateCamera"  Alpha="-0.8706742189221193" Beta="1.1903662489867926" Radius="12"
              Target="Vector3.Zero()" PanningSensibility="200" Scene="mainScene"></Camera>

      <Light x:Name="light" Type="HemisphericLight" Scene="mainScene" Direction="Vector3.Up()"></Light>

      <Material x:Name="groundMaterial" Type="GridMaterial" Scene="mainScene">
          <Script>
            var groundMaterial = vt.Get("groundMaterial");
            groundMaterial.Ctrl.majorUnitFrequency = 5;
            groundMaterial.Ctrl.minorUnitVisibility = 0.45;
            groundMaterial.Ctrl.gridRatio = 1;
            groundMaterial.Ctrl.backFaceCulling = false;
            groundMaterial.Ctrl.mainColor = new BABYLON.Color3.FromHexString('#6C6C6C');
            groundMaterial.Ctrl.lineColor = new BABYLON.Color3(1.0, 1.0, 1.0);
            groundMaterial.Ctrl.opacity = 0.48;
          </Script>
      </Material>

      <Ground x:Name="ground" Scene="mainScene" Width="50" Height="50" Material="groundMaterial"></Ground>

      <Box x:Name="box" Scene="mainScene" Width="2"></Box>

    </Grid>
    <!-- https://playground.babylonjs.com/#GD4NPB#1 -->
</Application>