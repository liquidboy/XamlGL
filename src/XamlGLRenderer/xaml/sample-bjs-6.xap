<Application
    xmlns="http://schemas.xamlgl.com/xamlgl"
    xmlns:x="http://schemas.xamlgl.com/xamlgl/x"
    ThemeName="Metro">
    <Grid x:Name="layoutRoot">
      <Scene x:Name="mainScene">
        <Script>
          var scene = vt.Get("mainScene");
          var camera = vt.Get("freeCamera");
          var start_time = Date.now();

          scene.Ctrl.beforeRender = () => {
            var cameraDepth = ((Date.now() - start_time) * 0.03) % 8000;
            camera.Ctrl.position.z = cameraDepth;
          };
        </Script>
      </Scene>

      
      <Texture x:Name="backgroundTexture" Type="DynamicTexture" GeneratingMipMaps="true" Scene="mainScene" Options="512"></Texture>
      <Background x:Name="back0" Scene="mainScene" Texture="backgroundTexture">
        <Script>
          var back0 = vt.Get("back0");

          var textureContext = back0.Ctrl.texture.getContext();
          var size = back0.Ctrl.texture.getSize();

          textureContext.clearRect(0, 0, size.width, size.height);

          var gradient = textureContext.createLinearGradient(0, 0, 0, 512);
          gradient.addColorStop(0, "#1e4877");
          gradient.addColorStop(0.5, "#4584b4");

          textureContext.fillStyle = gradient;
          textureContext.fillRect(0, 0, 512, 512);
          back0.Ctrl.texture.update();
        </Script>
      </Background>
      
      
      <Camera x:Name="freeCamera" Type="FreeCamera" Position="Vector3(0,-128,0)" FOV="30" MinZ="1" MaxZ="3000" 
              Scene="mainScene"></Camera>

      <ShadersStore x:Name="cloudVertexShader">

        #ifdef GL_ES
        precision highp float;
        #endif

        // Attributes
        attribute vec3 position;
        attribute vec2 uv;

        // Uniforms
        uniform mat4 worldViewProjection;

        // Normal
        varying vec2 vUV;

        void main(void) {
          gl_Position = worldViewProjection * vec4(position, 1.0);

          vUV = uv;
        }

      </ShadersStore>

      <ShadersStore x:Name="cloudFragmentShader">
        #ifdef GL_ES
        precision highp float;
        #endif

        varying vec2 vUV;

        uniform vec3 fogColor;
        uniform float fogNear;
        uniform float fogFar;

        // Refs
        uniform sampler2D textureSampler;

        void main(void) {
          float depth = gl_FragCoord.z / gl_FragCoord.w;
          float fogFactor = smoothstep(fogNear, fogFar, depth);

          gl_FragColor = texture2D(textureSampler, vUV);
          gl_FragColor.w *= pow(abs(gl_FragCoord.z), 20.0);
          gl_FragColor = mix(gl_FragColor, vec4(fogColor, gl_FragColor.w), fogFactor);
        }
      </ShadersStore>

      <Texture x:Name="textureSampler" Type="Texture" Scene="mainScene" RootUrl="/assets/textures/cloud.png"></Texture>
      <Material x:Name="cloud" Type="ShaderMaterial" Scene="mainScene" 
                ShaderPath="{`vertexElement`: `cloud`, `fragmentElement`: `cloud` }"
                Options="{`needAlphaBlending`: true, `attributes`: [`position`, `uv`], `uniforms`: [`worldViewProjection`], `samplers`: [`textureSampler`]}">
        <Script>
          var textureSampler = vt.Get("textureSampler");
          var cloudMaterial = vt.Get("cloud");
          cloudMaterial.Ctrl.setTexture("textureSampler", textureSampler.Ctrl);
          cloudMaterial.Ctrl.setFloat("fogNear", -100);
          cloudMaterial.Ctrl.setFloat("fogFar", 3000);
          cloudMaterial.Ctrl.setColor3("fogColor", BABYLON.Color3.FromInts(69, 132, 180));
        </Script>
      </Material>

      <Mesh x:Name="Clouds" Scene="mainScene" Material="cloud">
        <Script>
          var clouds = vt.Get("Clouds");
          
          var size = 128;
          var count = 8000;
          var globalVertexData;

          for (var i = 0; i &lt; count; i++) {
            var planeVertexData = BABYLON.VertexData.CreatePlane({ size: 128 });

            delete planeVertexData.normals; // We do not need normals

            // Transform
            var randomScaling = Math.random() * Math.random() * 1.5 + 0.5;
            var transformMatrix = BABYLON.Matrix.Scaling(randomScaling, randomScaling, 1.0);
            transformMatrix = transformMatrix.multiply(BABYLON.Matrix.RotationZ(Math.random() * Math.PI));
            transformMatrix = transformMatrix.multiply(BABYLON.Matrix.Translation(Math.random() * 1000 - 500, -Math.random() * Math.random() * 100, count - i));

            planeVertexData.transform(transformMatrix);

		        if (!globalVertexData) {
			        globalVertexData = planeVertexData;
		        } else {
			        globalVertexData.merge(planeVertexData);
		        }
          }

          globalVertexData.applyToMesh(clouds.Ctrl);

          var clouds2 = clouds.Ctrl.clone();
          clouds2.position.z = -500;
        </Script>
      </Mesh>



    </Grid>
    <!-- https://www.babylonjs-playground.com/index.html#QYFDDP#1 -->
</Application>